?dnorm
# A function to shade the normal curve (You do not need to learn this code right now)
# Only learn how to use it
shade.norm <- function(mu = 0, sigma = 1, a = mu  - 4*sigma, b = mu  + 4*sigma){
curve(dnorm(x, mu, sigma), mu  - 4*sigma, mu  + 4*sigma)
xvec = seq(mu  - 4*sigma,mu  + 4*sigma, 0.1)
yvec = dnorm(xvec, mean = mu, sd = sigma)
polygon(c(xvec[xvec >= a & xvec <=b], b, a),
c(yvec[xvec >= a & xvec <=b], 0, 0), col = "lightgray")
}
shade.norm(mu = 4, sigma = sqrt(9),)
#HW04 Q5:
shade.norm(mu = 69.2, sigma = 2.5)
pnorm(72, 69.2, 2.5)
1 - pnorm(72, 69.2, 2.5)
pnorm(72, 69.2,2.5) +  pnorm(72,63.8,2.7)
pnorm(72, 69.2,2.5) * pnorm(72,63.8,2.7)
pnorm(72, 69.2,2.5) * pnorm(72,63.8,2.7)
1 -pnorm(72, 69.2,2.5) * pnorm(72,63.8,2.7)
pnorm(69.2, 69.2,2.5) - pnorm(63.8,63.8,2.7)
pnorm(63.8,63.8,2.7)
pnorm(69.2, 69.2,2.5)
pnorm(0,5.4,13.54)
shade.norm(5.4,13.54)
pnorm(0,5.4,13.54)
shade.norm(5.4,sqrt(13.54))
shade.norm(5.4,sqrt(13.54))
pnorm(0,5.4,13.54)
n = 1000
sam.n = replicate(10^5, sum(sample(vec1,n,T)))
n = 30
v1 = rnorm(n)
op <- par(mfrow = c(2,2)) # Code to create output 2 X 2
boxplot(v1)
hist(v1)
plot(density(v1))
qqnorm(v1); qqline(v1)
par(op) # Return graphic parameters to default version
n = 10
op <- par(mfrow = c(2,2))
qqnorm(rnorm(n))
qqnorm(runif(n))
qqnorm(rbinom(n, 100, 0.1))
qqnorm(rchisq(n, 5))
par(op)
vec1 = rbinom(10^5, 100, 0.01) # X ~ binomial(n=100, p = 0.01)
hist(vec1, breaks = 5)
plot(density(vec1))
qqnorm(vec1)
qqline(vec1)
mean(vec1) # EX = np = 1
mean(vec1^2) - mean(vec1)^2 # VarX = np(p-1) = 100*0.01*0.99 = 0.99
n = 1000
sam.n = replicate(10^5, sum(sample(vec1,n,T)))
hist(sam.n, freq = F)
sam.n = replicate(10^5, sum(sample(vec1,n,T)))
hist(sam.n, freq = F)
n = 30
sam.n = replicate(10^5, sum(sample(vec1,n,T)))
hist(sam.n, freq = F)
n = 100
sam.n = replicate(10^5, sum(sample(vec1,n,T)))
hist(sam.n, freq = F)
n = 1000
sam.n = replicate(10^5, sum(sample(vec1,n,T)))
hist(sam.n, freq = F)
sam.n = replicate(10^5, mean(sample(vec1,n,T)))
hist(sam.n, freq = F)
n = 1000
sam.n = replicate(10^5, mean(sample(vec1,n,T)))
hist(sam.n, freq = F)
vec1 = rbinom(10^5, 100, 0.01) # X ~ binomial(n=100, p = 0.01)
hist(vec1, breaks = 5)
plot(density(vec1))
qqnorm(vec1)
qqline(vec1)
mean(vec1) # EX = np = 1
mean(vec1^2) - mean(vec1)^2 # VarX = np(p-1) = 100*0.01*0.99 = 0.99
n = 5
sam.n = replicate(10^5, mean(sample(vec1,n,T)))
hist(sam.n, freq = F)
n = 10
sam.n = replicate(10^5, mean(sample(vec1,n,T)))
hist(sam.n, freq = F)
n = 30
sam.n = replicate(10^5, mean(sample(vec1,n,T)))
hist(sam.n, freq = F)
clt = function(x, num.samples, n){
xbar.vec = replicate(num.samples, mean(sample(x,n, replace = T)))
sigma2 = mean(xbar.vec^2)-(mean(xbar.vec))^2
sigma = sqrt(sigma2)
sigma.X = sqrt(mean(x^2) - mean(x)^2)
print(c(mu.X = mean(x),
mu.Xbar = mean(xbar.vec),
sigma.X = sigma.X,
sigma.Xbar = sigma))
hist(xbar.vec, breaks = 100,
xlim = c(min(x),max(x)),
main = paste("n =", n),
xlab = paste("Sample mean (Xbar_n)"))
}
clt(x = x2, num.samples = 10000, n = 2)
######################
N = 10^5
set.seed(350)
x1 = rbinom(N, 100, .01)
x2 = c(rnorm(N/2,10,3),rnorm(N/2,2,1))
astragali = c(1,3,3,3,3,4,4,4,4,6)
x3 = sample(x = astragali, size = N, replace = TRUE)
n
n
n
clt = function(x, num.samples, n){
xbar.vec = replicate(num.samples, mean(sample(x,n, replace = T)))
sigma2 = mean(xbar.vec^2)-(mean(xbar.vec))^2
sigma = sqrt(sigma2)
sigma.X = sqrt(mean(x^2) - mean(x)^2)
print(c(mu.X = mean(x),
mu.Xbar = mean(xbar.vec),
sigma.X = sigma.X,
sigma.Xbar = sigma))
hist(xbar.vec, breaks = 100,
xlim = c(min(x),max(x)),
main = paste("n =", n),
xlab = paste("Sample mean (Xbar_n)"))
}
clt(x = x2, num.samples = 10000, n = 2)
clt(x = x2, num.samples = 10^5, n = 10)
clt(x = x2, num.samples = 10^5, n = 30)
clt(x = x2, num.samples = 10^5, n = 100)
clt(x = x2, num.samples = 10, n = 2)
clt(x = x2, num.samples = 100, n = 2)
clt(x = x2, num.samples = 1000, n = 2)
clt(x = x2, num.samples = 10000, n = 2)
clt(x = x2, num.samples = 10000, n = 30)
clt(x = x2, num.samples = 10^5, n = 100)
# Problem Set A
# Question 2
# a) need test statistic
alpha = 0.05
xbar = -0.82
ybar = 1.39
s1 = 4.09
s2 = 1.22
n1 = 10
n2 = 20
SE = sqrt(s1^2/n1 + s2^2/n2)
Deltahat = xbar - ybar
t.w = (Deltahat - 0)/SE
t.w
# -1.671927
nu.hat = (s1^2/n1 + s2^2/n2)^2/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
p.value = 2*(1 - pt(abs(t.w), df = nu.hat))
p.value
nu.hat
# 0.1260808
pt(1.76,df=10)
# 0.1260808
pt(-1.76,df=10)
pt(1.76,df=10)
# -1.671927
nu.hat = (s1^2/n1 + s2^2/n2)^2/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
nu.hat
pt(1.76,df=10)
typeA = c(233, 291, 312, 250, 246, 197, 268, 224, 239, 239, 254, 276, 234, 181, 248, 252, 202, 218, 212, 325)
typeB = c(344, 185, 263, 246, 224, 212, 188, 250, 148, 169, 226, 175, 242, 252, 153, 183, 137, 202, 194, 213)
qqnorm(typeA)
qqnorm(typeB)
qqplot(typeA, typeB)
qqnorm(typeA)
qqnorm(typeB)
qqnorm(typeA)
qqnorm(typeB)
xbar = mean(typeA)
ybar = mean(typeB)
s1 = sd(typeA)
s2 = sd(typeB)
n1 = length(typeA)
n2 = length(typeB)
SE = sqrt(s1^2/n1 + s2^2/n2)
Deltahat = xbar - ybar
t.w = (Deltahat - 0)/SE
t.w
# 2.562113
nu.hat = (s1^2/n1 + s2^2/n2)^2/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
p.value = 2*(1 - pt(abs(t.w), df = nu.hat))
p.value
alpha = 0.05
q = qt(1-alpha/2, df = nu.hat)
q
Deltahat - q*SE
Deltahat + q*SE
Deltahat
alpha = 1 - .9
q = qt(1-alpha/2, df = nu.hat)
q
Deltahat - q*SE
# 11.84155
Deltahat + q*SE
xbar = 23.4
ybar = 21.9
sd1 = 5.7
sd2 = 7.2
qqnorm(xbar)
n1 = 235
n2 = 197
SE = sqrt(s1^2/n1 + s2^2/n2)
Deltahat = xbar - ybar
t.w = (Deltahat - 0)/SE
t.w
# 0.3578143
nu.hat = (s1^2/n1 + s2^2/n2)^2/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
p.value = 2*(1 - pt(abs(t.w), df = nu.hat))
p.value
alpha = 1 - .97
q = qt(1-alpha/2, df = nu.hat)
q
# 2.178721
Deltahat - q*SE
# -7.633458
Deltahat + q*SE
Deltahat
summary(faithful)
m1 <- lm(waiting ~ eruptions, data = faithful)
plot(waiting ~ eruptions, data = faithful)
summary(faithful)
m1 <- lm(waiting ~ eruptions, data = faithful)
plot(waiting ~ eruptions, data = faithful)
abline(m1, col= " red")
summary(m1)
# To change the coordinate ranges in plots we can add to the plot function
# arguments "xlim = c( , )" and "ylim = c( , )" with the appropriate
# coordinate values.
# As an illustration, to include the origin on our example:
plot(waiting ~ eruptions, data = faithful,
xlim = c(0,6), ylim = c(0,100))
# To change the coordinate ranges in plots we can add to the plot function
# arguments "xlim = c( , )" and "ylim = c( , )" with the appropriate
# coordinate values.
# As an illustration, to include the origin on our example:
plot(waiting ~ eruptions, data = faithful,
xlim = c(0,6), ylim = c(0,100))
plot(waiting ~ eruptions, data = faithful)
# To change the coordinate ranges in plots we can add to the plot function
# arguments "xlim = c( , )" and "ylim = c( , )" with the appropriate
# coordinate values.
# As an illustration, to include the origin on our example:
plot(waiting ~ eruptions, data = faithful,
xlim = c(0,6), ylim = c(0,100))
abline(m1, col= " red")
B0 = 33.4744 # y intercept
B1 = 10.7296 # eruptions
summary(m1)
t = (B0 - 31)/se
se = 1.1549
t = (B0 - 31)/se
1 - pt(t, 270)
t
