stat_fun(x)
boot.out = (x,stat_fun(x),R=10000)
stat_fun(x)
boot.out = (x, stat_fun(x), R=10000)
stat_fun(x)
boot.out = (x, stat_fun(x), R=10000)
stat_fun(x)
boot_out = (x, stat_fun(x), R=10000)
stat_out = stat_fun(x)
boot_out = (x, stat_out, R=10000)
stat_fun(x)
boot_out = (x, stat_out, R=10000)
stat_fun(x)
boot_out = (x, stat_fun(x), R=10000)
boot = stat_fun(x)
boot_out = (x, boot, R=10000)
stat_fun(x)
boot_out = (stat_fun(x), x, R=10000)
stat_fun(x)
boot_out = (x, x, R=10000)
stat_fun(x)
boot_out = (x, stat_fun(x), R=10000)
boot_out = boot(x,stat_fun,10000)
intervals = list()
for(i in 1:9){
intervals[[i]] = boot.ci(boot_out,type="basic",index=i)
}
intervals
names(intervals) = names(stat_fun(x))
stat_fun2 = function(x){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
boot_out = boot(x,stat_fun2,10000)
stat_fun2 = function(x){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
boot_out = boot(x,stat_fun2,10000)
boot_out2 = boot(x,stat_fun2,10000)
stat_fun2 = function(xind=c(1:dim(x)[1])){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
boot_out2 = boot(x,stat_fun2,10000)
boot_out = boot(x,stat_fun2,10000)
correlations_fun = function(xind=c(1:dim(x)[1])){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
stat_fun2 = function(xind=c(1:dim(x)[1])){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
stat_fun2 = function(x){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
data(iris)
x = as.matrix(iris[iris$Species!="setosa",c(1:3)])
stat_fun2 = function(x){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
boot_out = boot(x,stat_fun2,10000)
boot_out = boot(x,stat_fun2,10000)
boot_out = boot(x,stat_fun2(x),10000)
boot_out = boot(x,stat_fun2(x),10000)
boot_out = boot(x,stat_fun2,10000)
stat_fun2 = function(x,stat_fun){
stat_out = stat_fun(x)
corr_sw_pl = stat_out['covariances.Sepal.Width_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Petal.Length']
)
corr_sl_pl = stat_out['covariances.Sepal.Length_Petal.Length']/
sqrt(
stat_out['variances.Sepal.Length']*
stat_out['variances.Petal.Length']
)
corr_sw_sl = stat_out['covariances.Sepal.Width_Sepal.Length']/
sqrt(
stat_out['variances.Sepal.Width']*
stat_out['variances.Sepal.Length']
)
return(c(
corr_sw_sl = corr_sw_sl,
corr_sl_pl = corr_sl_pl,
corr_sw_pl = corr_sw_pl
))
}
boot_out = boot(x,stat_fun2,10000)
intervals = list()
for(i in 1:9){
intervals[[i]] = boot.ci(boot_out,type="basic",index=i)
}
boot_out = boot(x,stat_fun2,10000)
#intervals = list()
#for(i in 1:9){
# intervals[[i]] = boot.ci(boot_out,type="basic",index=i)
#}
#intervals
#names(intervals) = names(stat_fun(x))
boot_out = boot(x,stat_fun2,10000)
intervals = list()
for(i in 1:9){
intervals[[i]] = boot.ci(boot_out,type="basic",index=i)
}
boot_out = boot(x,stat_fun2,10000)
intervals = list()
for(i in 1:9){
intervals[[i]] = boot.ci(stat_out,type="basic",index=i)
}
boot_out = boot(stat_out,stat_fun2,10000)
boot_out = boot(stat_out(x),stat_fun2,10000)
boot_out = boot(x,stat_fun2,10000)
intervals = list()
for(i in 1:9){
intervals[[i]] = boot.ci(boot_out,type="basic",index=i)
}
knitr::opts_chunk$set(echo = TRUE)
y = 1
N = 10000 #sample size
u0 = 1
x0 = 1 #i am not going to use this
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
y = 1
N = 10000 #sample size
u0 = 1
# x0 = 1
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
y = 1
N = 10000 #sample size
u0 = 1
# x0 = 1
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
plot(x_out,type="l")
plot(u_out,type="l")
#starting point - drawn from marginal because we could
u_0 = rgamma(1,3,1)
#number of samples to take
N_samp = 10000
#output objects
u_out = rep(NA,N_samp)
x_out = rep(NA,N_samp)
#current values - we do not need a starting x value because we will sample from X|U first
u_curr = u_0
x_curr = NA
for(i in 1:N_samp){
x_curr = rexp(1, rate = u_curr)
u_curr = rgamma(1, shape = 4, rate = 1+x_curr)
x_out[i] = x_curr
u_out[i] = u_curr
}
plot(x_out,type="l")
plot(u_out,type="l")
plot(log(x_out),type="l")
plot(log(x_out),type="l")
plot(log(u_out),type="l")
acf(x_out)
acf(u_out)
y = 1
N = 10000 #sample size
u0 = 1
# x0 = 1
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
plot(x_out,type="l")
plot(u_out,type="l")
plot(log(x_out),type="l")
plot(log(u_out),type="l")
acf(x_out)
acf(u_out)
plot(u_out,x_out)
cor(u_out,x_out)
plot(density(u_out))
plot(density(x_out))
mean(u_out)
mean(x_out)
plot(log(u_out),log(x_out))
cor(u_out,x_out)
plot(density(u_out))
plot(density(x_out))
mean(u_out)
mean(x_out)
plot(log(u_out),log(x_out))
cor(u_out,x_out)
plot(density(u_out))
plot(density(x_out))
return('means')
plot(log(u_out),log(x_out))
cor(u_out,x_out)
plot(density(u_out))
plot(density(x_out))
print('means')
mean(u_out)
mean(x_out)
plot(log(u_out),log(x_out))
print('correlation')
cor(u_out,x_out)
plot(density(u_out))
plot(density(x_out))
print('means')
mean(u_out)
mean(x_out)
plot(log(u_out),log(x_out))
print('correlation X,U|Y=1')
cor(u_out,x_out)
plot(density(u_out))
plot(density(x_out))
print('means')
mean(u_out)
mean(x_out)
plot(log(u_out),log(x_out))
print('correlation X,U|Y=1')
cor(u_out,x_out)
plot(density(log(u_out))
plot(density(log(x_out))
plot(log(u_out),log(x_out))
print('correlation X,U|Y=1')
cor(u_out,x_out)
plot(density(log(u_out)))
plot(density(log(x_out)))
print('means')
mean(u_out)
mean(x_out)
plot(log(u_out),log(x_out))
print('correlation X,U|Y=1')
cor(u_out,x_out)
plot(density(log(u_out)))
plot(density(log(x_out)))
print('means')
mean(u_out)
mean(x_out)
gibbs_sample = function(N_samp=10000, y=0.1, u_0=1){
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
return(x_out,u_out)
}
gibbs_sample(n_sample=10000)
gibbs_sample = function(N_samp=10000, y=0.1, u_0=1){
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
return(x_out,u_out)
}
gibbs_sample(y=0.1,u_0=1)
gibbs_sample = function(N_samp=10000, y=0.1, u_0=1){
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
c(x_out,u_out)
}
gibbs_sample(y=0.1,u_0=1)
gibbs_sample = function(N_samp=10000, y=0.1, u_0=1){
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
plot(x_out,type="l")
plot(u_out,type="l")
}
gibbs_sample(y=0.1,u_0=1)
gibbs_sample = function(N_samp=10000, y=0.1, u_0=1){
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
'regular plots'
plot(x_out,type="l")
plot(u_out,type="l")
'log plots'
plot(log(x_out),type='l')
plot(log(u_out),type='l')
}
gibbs_sample(y=0.1,u_0=1)
gibbs_sample = function(N_samp=10000, y=0.1, u_0=1){
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
#'regular plots'
plot(x_out,type="l")
plot(u_out,type="l")
#'log plots'
plot(log(x_out),type='l')
plot(log(u_out),type='l')
#'acf plots'
acf(log(x_out))
acf(log(u_out))
}
gibbs_sample(y=0.1,u_0=1)
gibbs_sample = function(N_samp=10000, y=0.1, u_0=1){
u_curr = u0
x_curr = NA
x_out = u_out = rep(NA,N)
for(i in 1:N){
x_curr = rgamma(1,2,1+u_curr*y)
u_curr = rgamma(1,3,1+x_curr*y)
x_out[i] = x_curr
u_out[i] = u_curr
}
#'regular plots'
plot(x_out,type="l")
plot(u_out,type="l")
#'log plots'
plot(log(x_out),type='l')
plot(log(u_out),type='l')
#'acf plots'
acf(x_out)
acf(u_out)
}
gibbs_sample(y=0.1,u_0=1)
